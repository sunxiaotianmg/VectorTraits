<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="../../CommonVector.ttinclude"#>
<#
    //string[] typenameList = {
    //        "VectorTraitsBase",
    //        "VectorTraits128Base",
    //        "VectorTraits128AdvSimd",
    //        "VectorTraits128AdvSimdA64",
    //        "VectorTraits256Base",
    //        "VectorTraits256Avx2"
    //    };
    string[] typenameList = typenameList_VectorTTraits;
    string[] tMyNameList = {
            "Byte",
            "UInt16"
    };
#>
using BenchmarkDotNet.Attributes;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Text;
using Zyl.VectorTraits.Impl;

namespace Zyl.VectorTraits.Benchmarks.AVector.S {

<#
    foreach(string tMyName in tMyNameList) {
#>
    partial class ShiftRightLogicalBenchmark_<#=tMyName#> {

<#
    foreach(string aTypeName in typenameList) {
#>
        // StaticSumSRLTraitsOverload - <#=aTypeName#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static unsafe <#=tMyName#> StaticSumSRLTraitsOverload(<#=aTypeName#> vectorTraits, <#=tMyName#>[] src, int srcCount, int shiftAmount) {
            <#=tMyName#> rt = 0; // Result.
            int VectorWidth = Vector<<#=tMyName#>>.Count; // Block width.
            int nBlockWidth = VectorWidth; // Block width.
            int cntBlock = srcCount / nBlockWidth; // Block count.
            int cntRem = srcCount % nBlockWidth; // Remainder count.
            Vector<<#=tMyName#>> vrt = Vector<<#=tMyName#>>.Zero; // Vector result.
            int i;
            // Body.
            shiftAmount = Scalars.LimitShiftAmount<<#=tMyName#>>(shiftAmount);
            fixed (<#=tMyName#>* p0 = &src[0]) {
                <#=tMyName#>* p = p0;
                // Vector processs.
                for (i = 0; i < cntBlock; ++i) {
                    Vector<<#=tMyName#>> vtemp = vectorTraits.ShiftRightLogical(*(Vector<<#=tMyName#>>*)p, shiftAmount);
                    vrt += vtemp; // Add.
                    p += nBlockWidth;
                }
                // Remainder processs.
                for (i = 0; i < cntRem; ++i) {
                    rt += (<#=tMyName#>)(p[i] >> shiftAmount);
                }
            }
            // Reduce.
            for (i = 0; i < VectorWidth; ++i) {
                rt += vrt[i];
            }
            return rt;
        }

        // StaticSumSRLFastTraitsOverload - <#=aTypeName#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static unsafe <#=tMyName#> StaticSumSRLFastTraitsOverload(<#=aTypeName#> vectorTraits, <#=tMyName#>[] src, int srcCount, int shiftAmount) {
            <#=tMyName#> rt = 0; // Result.
            int VectorWidth = Vector<<#=tMyName#>>.Count; // Block width.
            int nBlockWidth = VectorWidth; // Block width.
            int cntBlock = srcCount / nBlockWidth; // Block count.
            int cntRem = srcCount % nBlockWidth; // Remainder count.
            Vector<<#=tMyName#>> vrt = Vector<<#=tMyName#>>.Zero; // Vector result.
            int i;
            // Body.
            shiftAmount = Scalars.LimitShiftAmount<<#=tMyName#>>(shiftAmount);
            fixed (<#=tMyName#>* p0 = &src[0]) {
                <#=tMyName#>* p = p0;
                // Vector processs.
                for (i = 0; i < cntBlock; ++i) {
                    Vector<<#=tMyName#>> vtemp = vectorTraits.ShiftRightLogicalFast(*(Vector<<#=tMyName#>>*)p, shiftAmount);
                    vrt += vtemp; // Add.
                    p += nBlockWidth;
                }
                // Remainder processs.
                for (i = 0; i < cntRem; ++i) {
                    rt += (<#=tMyName#>)(p[i] >> shiftAmount);
                }
            }
            // Reduce.
            for (i = 0; i < VectorWidth; ++i) {
                rt += vrt[i];
            }
            return rt;
        }

<#
    } // End: foreach(string aTypeName in typenameList)
#>

    } // End: partial class ShiftRightLogicalBenchmark_<#=tMyName#>

<#
    } // End: foreach(string aTypeName in typenameList)
#>

}

