# VectorTraits_design

## Conditional compilation symbols(条件编译符号)

- UNSAFE: 是否使用 unsafe 关键字。
- UNSAFE_USE_TRAITS: 是否使用 unsafe 版的 VectorTraits 。
- SOFTWARE_OPTIMIZATION: Software algorithm optimization（软件算法优化）, 会利用其它向量函数组合实现. 如 ShiftLeft_Multiply、ShiftRightArithmetic_Var64 .
- HARDWARE_OPTIMIZATION: Hardware algorithm optimization（硬件算法优化）, 会尝试更优化的算法. 如 ShiftRightArithmeticFast_If .
- BCL_OVERRIDE_BASE_FIXED: 用有硬件加速的新版 BCL 库的方法来覆盖固定长度向量的算法. 仅对有硬件加速的来使用.
- BCL_OVERRIDE_BASE_VAR: 用新版 BCL 库的方法来覆盖可变长度向量的算法. 它一般需要通过分支或循环来实现，性能不一定比BCL算法优化。且能获得.NET版本更新带来的改进，故用它。
- BCL_BASE_OVERRIDE_STATIC: 对于特性静态方法（Vectors.Traits.cs等文件）, 是否直接调用Base版的静态方法, 而不是动态调用接口方法。因为低版本.NET（< `.NET Core 3.0`）在通过接口调用封固类方法时，不会内联。实际测试后发现，`.NET Core 3.0`才开始支持“在通过接口调用封固类方法时的内联”，而且该版本才支持内在函数。
- DRY_JOB: 性能评测时使用 DryJob , 仅运行一次快速得到汇编代码.
- BENCHMARKS_OFF: 关闭评测 . 用于专门测试某个评测时，此时仅需专门打开某一个评测。
- BENCHMARKS_128ALGORITHM: 评测各种128位底层算法.
- BENCHMARKS_256ALGORITHM: 评测各种256位底层算法.
- BENCHMARKS_ALGORITHM: 评测各种底层算法. 如 ShiftLeft_Multiply .
- BENCHMARKS_RAW: 评测各种原始用法. 如 SumSLLRawAvx2 .
- BENCHMARKS_TRAITS_USAGES: 评测特征的各种用法. 如 SumSLLTraitsArg, SumSLLTraitsOverload .
- BENCHMARKS_TARGET_FAST: 评测目标方法的快速版.

注: 若配置的条件编译符号带了“0”后缀的, 表示关闭. 例如“BCL_BASE_OVERRIDE_STATIC0”, 表示关闭“BCL_BASE_OVERRIDE_STATIC”.

